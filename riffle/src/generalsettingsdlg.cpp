/////////////////////////////////////////////////////////////////////////////
// Name:        generalsettingsdlg.cpp
// Purpose:     General settings page for Riffle
// Author:      Julian Smart
// Modified by: 
// Created:     04/12/05 17:11:58
// RCS-ID:      
// Copyright:   (c) Julian Smart
// Licence:     wxWindows License
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Apr 12 2005

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "generalsettingsdlg.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "valconfig.h"

////@begin includes
////@end includes

#include "generalsettingsdlg.h"
#include "riffle.h"
#include "mainframe.h"

////@begin XPM images
////@end XPM images

/*!
 * GeneralSettingsPage type definition
 */

IMPLEMENT_DYNAMIC_CLASS( GeneralSettingsPage, wxPanel )

/*!
 * GeneralSettingsPage event table definition
 */

BEGIN_EVENT_TABLE( GeneralSettingsPage, wxPanel )

////@begin GeneralSettingsPage event table entries
////@end GeneralSettingsPage event table entries

END_EVENT_TABLE()

/*!
 * GeneralSettingsPage constructors
 */

GeneralSettingsPage::GeneralSettingsPage( )
{
}

GeneralSettingsPage::GeneralSettingsPage( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, pos, size, style);
}

/*!
 * GeneralSettingsPage creator
 */

bool GeneralSettingsPage::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin GeneralSettingsPage member initialisation
////@end GeneralSettingsPage member initialisation

////@begin GeneralSettingsPage creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end GeneralSettingsPage creation
    return TRUE;
}

/*!
 * Control creation for GeneralSettingsPage
 */

void GeneralSettingsPage::CreateControls()
{    
////@begin GeneralSettingsPage content construction
    // Generated by DialogBlocks, Apr 12 2005 (Personal Edition)

    GeneralSettingsPage* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxALL, 5);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxCheckBox* itemCheckBox5 = new wxCheckBox( itemPanel1, ID_CHECKBOX, _("&Remember last directory"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
    itemCheckBox5->SetValue(FALSE);
    itemCheckBox5->SetHelpText(_("If checked, restores the last directory browsed"));
    if (ShowToolTips())
        itemCheckBox5->SetToolTip(_("If checked, restores the last directory browsed"));
    itemBoxSizer3->Add(itemCheckBox5, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemPanel1, wxID_STATIC, _("&Zoom by:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText7, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer8, 0, wxALIGN_LEFT, 5);

    itemBoxSizer8->Add(10, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl10 = new wxSpinCtrl( itemPanel1, ID_SPINCTRL, _("10"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 1, 100, 10 );
    itemSpinCtrl10->SetHelpText(_("Specify the zoom increment"));
    if (ShowToolTips())
        itemSpinCtrl10->SetToolTip(_("Specify the zoom increment"));
    itemBoxSizer8->Add(itemSpinCtrl10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText11 = new wxStaticText( itemPanel1, wxID_STATIC, _("% per increment"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemStaticText11, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM|wxADJUST_MINSIZE, 5);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemPanel1, wxID_STATIC, _("&Thumbnail size:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText13, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer14, 0, wxALIGN_LEFT, 5);

    itemBoxSizer14->Add(10, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl16 = new wxSpinCtrl( itemPanel1, ID_SPINCTRL1, _("50"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 10, 1000, 50 );
    itemSpinCtrl16->SetHelpText(_("Specify the thumbnail size"));
    if (ShowToolTips())
        itemSpinCtrl16->SetToolTip(_("Specify the thumbnail size"));
    itemBoxSizer14->Add(itemSpinCtrl16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( itemPanel1, wxID_STATIC, _("pixels"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer14->Add(itemStaticText17, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM|wxADJUST_MINSIZE, 5);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    // Set validators
    itemCheckBox5->SetValidator( wxConfigValidator(wxT("General/RestoreLastPath"), wxVAL_BOOL, wxGetApp().GetConfig()) );
    itemSpinCtrl10->SetValidator( wxConfigValidator(wxT("General/ZoomIncrement"), wxVAL_LONG, wxGetApp().GetConfig()) );
    itemSpinCtrl16->SetValidator( wxConfigValidator(wxT("General/ThumbnailSize"), wxVAL_LONG, wxGetApp().GetConfig()) );
////@end GeneralSettingsPage content construction
}

/// Transfers data from window
bool GeneralSettingsPage::TransferDataFromWindow()
{
    if (!wxPanel::TransferDataFromWindow())
        return false;

    ((RiffleFrame*) wxGetApp().GetTopWindow())->UpdateThumbnailSize();
    
    return true;
}


/*!
 * Should we show tooltips?
 */

bool GeneralSettingsPage::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap GeneralSettingsPage::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin GeneralSettingsPage bitmap retrieval
    return wxNullBitmap;
////@end GeneralSettingsPage bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon GeneralSettingsPage::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin GeneralSettingsPage icon retrieval
    return wxNullIcon;
////@end GeneralSettingsPage icon retrieval
}
